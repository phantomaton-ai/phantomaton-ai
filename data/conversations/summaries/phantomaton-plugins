We are working on creating the phantomaton-plugins project, which aims to provide a simplified and more expressive way to create plugins for the Phantomaton AI framework. We began by examining several existing Phantomaton plugins (cli, anthropic, and conversations) to understand the current patterns and conventions used in plugin development.

A Phantomaton plugin is implemented as a function that takes a configuration object and returns a plugin object with an install field (containing components to install), an optional instance field (for direct access to functionality), and potentially an includes array for declaring dependencies. The current implementation patterns were found to be somewhat verbose, leading us to design a new API using plugins.create, plugins.define, and various extension point types (composite, singleton).

We created several core files including create.js (handling plugin creation with various argument patterns), define.js (providing a fluent API for defining components), and expose.js (managing extension point exposure). The implementation leverages the sigilium library for extension point patterns and hierophant for dependency injection. We've maintained a focus on small, focused files and single-word names where possible.

We created a test suite demonstrating how plugins can be wired together using hierophant, and we're currently working on ensuring that plugins.create properly handles its various argument forms (extension point definitions object, instantiation function, and component definitions either as arrays or functions). The test suite verifies that plugins can be created and composed correctly.

The key improvements over the original plugin system include reduced boilerplate, more declarative plugin structure, and clearer extension point patterns. We're using lovecraft for testing and maintaining a strict separation between the test environment and the implementation. The project follows important Phantomaton conventions including single-word variable names, short files, small repositories, and ESM module syntax.